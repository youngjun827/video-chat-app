{"ast":null,"code":"import store from \"../store/store\";\nimport { setOpenRoom, setRoomDetails, setActiveRooms, setLocalStream, setRemoteStreams, setScreenSharingStream, setIsUserJoinedOnlyWithAudio } from \"../store/actions/roomActions\";\nimport * as socketConnection from \"./socketConnection\";\nimport * as webRTCHandler from \"./webRTCHandler\";\nexport const createNewRoom = () => {\n  const successCalbackFunc = () => {\n    store.dispatch(setOpenRoom(true, true));\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.createNewRoom();\n  };\n\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\nexport const newRoomCreated = data => {\n  const {\n    roomDetails\n  } = data;\n  store.dispatch(setRoomDetails(roomDetails));\n};\nexport const updateActiveRooms = data => {\n  var _store$getState$auth$;\n\n  const {\n    activeRooms\n  } = data;\n  const friends = store.getState().friends.friends;\n  const rooms = [];\n  const userId = (_store$getState$auth$ = store.getState().auth.userDetails) === null || _store$getState$auth$ === void 0 ? void 0 : _store$getState$auth$._id;\n  activeRooms.forEach(room => {\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\n\n    if (isRoomCreatedByMe) {\n      rooms.push({ ...room,\n        creatorUsername: \"Me\"\n      });\n    } else {\n      friends.forEach(f => {\n        if (f.id === room.roomCreator.userId) {\n          rooms.push({ ...room,\n            creatorUsername: f.username\n          });\n        }\n      });\n    }\n  });\n  store.dispatch(setActiveRooms(rooms));\n};\nexport const joinRoom = roomId => {\n  const successCalbackFunc = () => {\n    store.dispatch(setRoomDetails({\n      roomId\n    }));\n    store.dispatch(setOpenRoom(false, true));\n    const audioOnly = store.getState().room.audioOnly;\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\n    socketConnection.joinRoom({\n      roomId\n    });\n  };\n\n  const audioOnly = store.getState().room.audioOnly;\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\n};\nexport const leaveRoom = () => {\n  const roomId = store.getState().room.roomDetails.roomId;\n  const localStream = store.getState().room.localStream;\n\n  if (localStream) {\n    localStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setLocalStream(null));\n  }\n\n  const screenSharingStream = store.getState().room.screenSharingStream;\n\n  if (screenSharingStream) {\n    screenSharingStream.getTracks().forEach(track => track.stop());\n    store.dispatch(setScreenSharingStream(null));\n  }\n\n  store.dispatch(setRemoteStreams([]));\n  webRTCHandler.closeAllConnections();\n  socketConnection.leaveRoom({\n    roomId\n  });\n  store.dispatch(setRoomDetails(null));\n  store.dispatch(setOpenRoom(false, false));\n};","map":{"version":3,"names":["store","setOpenRoom","setRoomDetails","setActiveRooms","setLocalStream","setRemoteStreams","setScreenSharingStream","setIsUserJoinedOnlyWithAudio","socketConnection","webRTCHandler","createNewRoom","successCalbackFunc","dispatch","audioOnly","getState","room","getLocalStreamPreview","newRoomCreated","data","roomDetails","updateActiveRooms","activeRooms","friends","rooms","userId","auth","userDetails","_id","forEach","isRoomCreatedByMe","roomCreator","push","creatorUsername","f","id","username","joinRoom","roomId","leaveRoom","localStream","getTracks","track","stop","screenSharingStream","closeAllConnections"],"sources":["/Users/youngjun827/Downloads/Video Chat App - Learn MERN Stack with WebRTC and SocketIO/[TutsNode.com] - Video Chat App - Learn MERN Stack with WebRTC and SocketIO/8. Creating Video Group Call Rooms/discord-app/discord-frontend/src/realtimeCommunication/roomHandler.js"],"sourcesContent":["import store from \"../store/store\";\r\nimport {\r\n  setOpenRoom,\r\n  setRoomDetails,\r\n  setActiveRooms,\r\n  setLocalStream,\r\n  setRemoteStreams,\r\n  setScreenSharingStream,\r\n  setIsUserJoinedOnlyWithAudio,\r\n} from \"../store/actions/roomActions\";\r\nimport * as socketConnection from \"./socketConnection\";\r\nimport * as webRTCHandler from \"./webRTCHandler\";\r\n\r\nexport const createNewRoom = () => {\r\n  const successCalbackFunc = () => {\r\n    store.dispatch(setOpenRoom(true, true));\r\n\r\n    const audioOnly = store.getState().room.audioOnly;\r\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\r\n    socketConnection.createNewRoom();\r\n  };\r\n\r\n  const audioOnly = store.getState().room.audioOnly;\r\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\r\n};\r\n\r\nexport const newRoomCreated = (data) => {\r\n  const { roomDetails } = data;\r\n  store.dispatch(setRoomDetails(roomDetails));\r\n};\r\n\r\nexport const updateActiveRooms = (data) => {\r\n  const { activeRooms } = data;\r\n\r\n  const friends = store.getState().friends.friends;\r\n  const rooms = [];\r\n\r\n  const userId = store.getState().auth.userDetails?._id;\r\n\r\n  activeRooms.forEach((room) => {\r\n    const isRoomCreatedByMe = room.roomCreator.userId === userId;\r\n\r\n    if (isRoomCreatedByMe) {\r\n      rooms.push({ ...room, creatorUsername: \"Me\" });\r\n    } else {\r\n      friends.forEach((f) => {\r\n        if (f.id === room.roomCreator.userId) {\r\n          rooms.push({ ...room, creatorUsername: f.username });\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  store.dispatch(setActiveRooms(rooms));\r\n};\r\n\r\nexport const joinRoom = (roomId) => {\r\n  const successCalbackFunc = () => {\r\n    store.dispatch(setRoomDetails({ roomId }));\r\n    store.dispatch(setOpenRoom(false, true));\r\n    const audioOnly = store.getState().room.audioOnly;\r\n    store.dispatch(setIsUserJoinedOnlyWithAudio(audioOnly));\r\n    socketConnection.joinRoom({ roomId });\r\n  };\r\n\r\n  const audioOnly = store.getState().room.audioOnly;\r\n  webRTCHandler.getLocalStreamPreview(audioOnly, successCalbackFunc);\r\n};\r\n\r\nexport const leaveRoom = () => {\r\n  const roomId = store.getState().room.roomDetails.roomId;\r\n\r\n  const localStream = store.getState().room.localStream;\r\n  if (localStream) {\r\n    localStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setLocalStream(null));\r\n  }\r\n\r\n  const screenSharingStream = store.getState().room.screenSharingStream;\r\n  if (screenSharingStream) {\r\n    screenSharingStream.getTracks().forEach((track) => track.stop());\r\n    store.dispatch(setScreenSharingStream(null));\r\n  }\r\n\r\n  store.dispatch(setRemoteStreams([]));\r\n  webRTCHandler.closeAllConnections();\r\n\r\n  socketConnection.leaveRoom({ roomId });\r\n  store.dispatch(setRoomDetails(null));\r\n  store.dispatch(setOpenRoom(false, false));\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}